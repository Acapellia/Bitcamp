CHAPTER 1 프로그래밍을 시작합시다 
__1.1 프로그래밍 언어의 역사 
__1.2 비주얼 스튜디오 설치하기 

CHAPTER 2 처음 만드는 C# 프로그램 
__2.1 Hello, World! 
__2.2 첫 번째 프로그램 뜯어보기 
__2.3 CLR에 대하여 
__연습 문제 

CHAPTER 3 데이터 보관하기 
__3.1 데이터에도 종류가 있다 
__3.2 변수 
__3.3 값 형식과 참조 형식 
__3.4 기본 데이터 형식 
__3.5 상수와 열거 형식 
__3.6 Nullable 형식 
__3.7 var: 데이터 형식을 알아서 파악하는 똑똑한 C# 컴파일러 
__3.8 공용 형식 시스템 
연습 문제 

APPENDIX A 문자열 다루기 
__A.1 문자열 안에서 찾기 
__A.2 문자열 변형하기 
__A.3 문자열 분할하기 // split substring 
__A.4 문자열 서식 맞추기  

CHAPTER 4 데이터를 가공하는 연산자 
__4.1 C#에서 제공하는 연산자 둘러보기 
__4.2 산술 연산자 
__4.3 증가 연산자와 감소 연산자 
__4.4 문자열 결합 연산자 
__4.5 관계 연산자 
__4.6 논리 연산자 
__4.7 조건 연산자 
__4.8 널 조건부 연산자 
__4.9 비트 연산자 
__4.10 할당 연산자 
__4.11 Null 병합 연산자 
__4.12 연산자의 우선순위 
연습 문제 

CHAPTER 5 코드의 흐름 제어하기 
__5.1 분기문 
__5.2 반복문 
__5.3 점프문 
연습 문제 

CHAPTER 6 메소드로 코드 간추리기 
__6.1 메소드란? 
__6.2 return에 대하여 
__6.3 매개 변수에 대하여 
__6.4 참조에 의한 매개 변수 전달 // ref 
__6.5 메소드의 결과를 참조로 반환하기 
__6.6 출력 전용 매개 변수 // out 
__6.7 메소드 오버로딩 
__6.8 가변길이 매개 변수 // param keyword
__6.9 명명된 매개 변수  // func(a:20,b:30)
__6.10 선택적 매개 변수  // func(int a, int n =5)
__6.11 로컬 함수 // 함수 안의 함수
연습 문제 

CHAPTER 7 클래스 
__7.1 객체 지향 프로그래밍과 클래스 
__7.2 클래스의 선언과 객체의 생성 
__7.3 객체의 삶과 죽음에 대하여: 생성자와 종료자 
__7.4 정적 필드와 메소드 
// public static a;
// public static void func(){}
// 인스턴스를 생성하지 않아도 사용 가능
__7.5 객체 복사하기: 얕은 복사와 깊은 복사 
// 얕은 복사는 주소를 복사해 하나를 바꾸면 복사한 다른것도 바뀜
// 깊은 복사를 통해 값을 복사 (클래스 생성 -> 값 복사 - > 클래스 리턴 )
__7.6 this 키워드 
__7.7 접근 한정자로 공개 수준 결정하기 
__7.8 상속으로 코드 재활용하기 
__7.9 기반 클래스와 파생 클래스 사이의 형식 변환, 그리고is 와 as 
__7.10 오버라이딩과 다형성 
__7.11 메소드 숨기기 
자식이 오버라이딩 할 때 new 키워드를 붙여 부모의 메소드 숨기기
__7.12 오버라이딩 봉인하기 
//virtual 함수에 대해 파생 클래스(자식 클래스)가 오버라이딩 못하도록 막는 것
// 자식 클래스의 메소드에 사용
__7.13 중첩 클래스 
// class 안에 class 선언 / 바깥 class private 요소 참조 가능
__7.14 분할 클래스 
// partial 키워드를 사용해 클래스의 기능을 분리 작성 가능
__7.15 확장 메소드 
// 자료형에 메소드를 추가하여 자료형이 어떤 메소드를 포함하듯 표현하는 방식
// int a; a.plus() 
// 해당 자료형을 메소드의 매개변수(this 붙여서)로 넘겨 주어야 함
__7.16 구조체 
__7.17 튜플 
// var tuple = (1234,"string",1.55)
// tuple.Item1 tuple.Item2 ~~
// var tuple = (Name:"이름", Age : 15)
// tuple.Name, tuple.Age

연습 문제 

CHAPTER 8 인터페이스와 추상 클래스 
__8.1 인터페이스의 선언 
// interface 키워드 사용
// 메소드에 내용 없음
__8.2 인터페이스는 약속이다 
__8.3 인터페이스를 상속하는 인터페이스 
__8.4 여러 개의 인터페이스, 한꺼번에 상속하기 
__8.5 추상 클래스: 인터페이스와 클래스 사이 
// abstract 키워드 사용
// 메소드 구현할 때에도 앞에 abstract 붙여야함
// interface 여러개 상속가능, abstract 불가능
연습 문제 

CHAPTER 9 프로퍼티 
class Myclass{
	접근지정자 데이터형식 name{
		get{ return v'}
		set { v = value; }
	}
}
myclass.name = "  " / WriteLine($"name : {myclass.name}");
__9.1 public 필드의 유혹 
__9.2 메소드보다 프로퍼티 
__9.3 자동 구현 프로퍼티 
class myClass{
	접근지정자 데이터형식 변수명{get; set;} = value;
}// 초기화까지
9.4 프로퍼티와 생성자
class Engineer
{
	public string Name { get; set; } 
	public string Number { get; set; } 
}
Engineer engineer = new Engineer(){
	Name = "Jakop",
	Number = "010.1234.5678"
};
__9.5 무명 형식 
var a = new { Name = "Jack", Phone = "010-0000-0000" };
WriteLine($"name : {a.Name}, number : {a.Phone}");
// class 사용하듯 사용 가능

__9.6 인터페이스와 프로퍼티 
__9.7 추상 클래스와 프로퍼티 
// 프로퍼티 생성시는 abstract 상속받은 곳에서 구현시는 override
연습 문제 

CHAPTER 10 배열과 컬렉션, 그리고 인덱서 
__10.1 All for one, one for all 
__10.2 배열을 초기화하는 방법 세 가지 
// string[] array = new string[num] {~~~~}
// string[] array = new string {~~~~~}
// strint[] array = {~~~~~}
__10.3 알아두면 삶이 윤택해지는 System.Array 
// 여러가지 메소드 포함
__10.4 2차원 배열 
// int [,] arr = new int[ , ] {~~~~} 
__10.5 다차원 배열 
// int [ , , ] arr = new int [ , , ] {~~~~} 
__10.6 가변 배열 
int[][] jagged = new int[3][];
jagged[0] = new int[5]{1,2,3,4,5};
jagged[1] = new int[]{100,200,300};
jagged[2] = new int[]{1000,200};
__10.7 컬렉션 맛보기 
__10.8 컬렉션을 초기화하는 방법 
__10.9 인덱서 
 public string this[int i]
{
            get { return v[i]; }
            set { v = value; }
}
__10.10 foreach가 가능한 객체 만들기 
// IEnumerable, IEnumerate  -> 어려움
연습 문제 

CHAPTER 11 일반화 프로그래밍  - Generic
__11.1 일반화 프로그래밍이란? 
__11.2 일반화 메소드 
__11.3 일반화 클래스 
__11.4 형식 매개 변수 제약시키기 
__11.5 일반화 컬렉션 
__11.6 foreach를 사용할 수 있는 일반화 클래스 
연습 문제 

CHAPTER 12 예외 처리하기 -> 나중에
__12.1 예외에 대하여 
__12.2 try~catch로 예외 받기 
__12.3 System.Exception 클래스 
__12.4 예외 던지기 
__12.5 try~catch와 finally 
__12.6 사용자 정의 예외 클래스 만들기 
__12.7 예외 필터하기 
__12.8 예외 처리 다시 생각해보기 
연습 문제 

CHAPTER 13 대리자와 이벤트 
__13.1 대리자란? 
// 함수 포인터 느낌
// delegate 반환형 이름(매개변수);
// 메소드와 delegate는 형식(반환형,매개변수)가 같아야 한다.
delegate int myDelegate(int a, int b);
int add(int a, int b) {return a+b;}
myDelegate d = new myDelegate(add);
// 메소드를 매개변수로 넣어준다.
__13.2 대리자는 왜, 그리고 언제 사용하나요? 
__13.3 일반화 대리자 
// generic과 delegate
__13.4 대리자 체인 
// 메소드를 여러개 넣어주고 실행하는 느낌
// del = new del(add) + new del(sub) + new del(mul)을 해주면 3가지 연산실행
// del-= new del(mul) 해주면 mul은 실행안하고 빠짐
__13.5 익명 메소드 
Del = delegate (int a, int b)
{
	return a + b;
 };
// 메소드를 생성하지 않고 delegate에 바로 넣어주는 방식
__13.6 이벤트: 객체에 일어난 사건 알리기 
__13.7 대리자와 이벤트 
// delegate : 외부에서 호출 가능 
// event : 외부에서 호출 불가능
연습 문제 

CHAPTER 14 람다식 
__14.1 람다식, 너는 어디에서 왔니? 
__14.2 처음 만나는 람다식 
__14.3 문 형식의 람다식 
__14.4 Func와 Action으로 더 간편하게 무명 함수 만들기 
__14.5 식 트리 
__14.6 식으로 이루어지는 멤버 
연습 문제 

CHAPTER 15 LINQ 
__15.1 데이터! 데이터! 데이터! 
__15.2 LINQ의 기본: from, where, orderby, select 
__15.3 여러 개의 데이터 원본에 질의하기 
__15.4 group by로 데이터 분류하기 
__15.5 두 데이터 원본을 연결하는 join 
__15.6 LINQ의 비밀과 LINQ 표준 연산자 
연습 문제 

CHAPTER 16 리플렉션과 애트리뷰트
// 메타 데이터 
__16.1 리플렉션 // runtime 도중 메타 데이터를 출력가능 
__16.2 애트리뷰트 // 컴퓨터를 위한 주석느낌, 메타 데이터 등을 입력 가능
연습 문제 

CHAPTER 17 dynamic 형식 
학습 목표 
__17.1 dynamic 형식 소개 
__17.2 COM과 .NET 사이의 상호 운용성을 위한 dynamic 형식 
__17.3 동적 언어와의 상호 운용성을 위한 dynamic 형식 

CHAPTER 18 파일 다루기 
__18.1 파일 정보와 디렉토리 정보 다루기 
__18.2 파일을 읽고 쓰기 위해 알아야 할 것들 
__18.3 이진 데이터 처리를 위한 BinaryWriter/BinaryReader 
__18.4 텍스트 파일 처리를 위한 StreamWriter/StreamReader 
__18.5 객체 직렬화하기 

CHAPTER 19 스레드와 태스크 
__19.1 프로세스와 스레드 
__19.2 Task와 Task[TResult], 그리고 Parallel 
__19.3 async 한정자와 await 연산자로 만드는 비동기 코드 

CHAPTER 20 WinForm으로 만드는 사용자 인터페이스 
__20.1 도대체 무슨 일이 일어나고 있는 걸까? 
__20.2 C# 코드로 WinForm 윈도우 만들기 
__20.3 Application 클래스 
__20.4 윈도우를 표현하는 Form 클래스 
__20.5 폼 디자이너를 이용한 WinForm UI 구성 
__20.6 사용자 인터페이스와 비동기 작업 

CHAPTER 21 네트워크 프로그래밍 
__21.1 네트워크 프로그래밍에 앞서 알아둬야 할 기초 
__21.2 TcpListener와 TcpClient 
__21.3 흐르는 패킷 

CHAPTER 22 가비지 컬렉션 
__22.1 가비지 컬렉터를 아시나요? 
__22.2 개처럼 할당하고 정승처럼 수거하라 
__22.3 세대별 가비지 컬렉션 
__22.4 가비지 컬렉션을 이해했습니다. 우리는 뭘 해야 하죠?