프로젝트명 : LAL(Chat Program)
진행기간 : 200730 - 200807
팀원 : 3명

<목표>
- 수업시간에 배운 서버 프로그램 1개에 여러 클라이언트 프로그램이 접속해서 서버로 string을 보내는 프로그램을 응용하여
다수의 유저가 채팅을 하면 서버가 채팅 내용을 받아 다른 유저의 클라이언트 프로그램에 보내주는 프로그램을 제작
- Win Form을 사용하여 프로그램을 만들기
- 여러명이 하나의 프로젝트를 할 때 소스코드를 잘 관리하기

<프로그램 내용>
연인 매칭 프로그램에서 아이디어를 얻은 멘토 매칭 프로그램
멘토들의 정보와 채팅방이 이미 있다고 가정
유저(멘티)는 회원가입과 로그인을 한다.
멘토가 없는 유저는 접속하면 멘토를 선택하는 Form으로 가서 멘토를 선택한다.
멘토가 정해지면 멘토와 멘티들이 있는 채팅방으로 가서 대화를 한다.
유저가 접속하거나 나갔을때 채팅방에 로그가 남는다.
유저가 채팅을 하면 채팅방에 포함된 모든 유저에게 채팅이 보내지고 채팅을 받는 유저에게 효과음이 난다. 

<역할>
팀장 -> 메인 서버 프로그램(클라이언트로부터 정보(request)를 받아 처리하고 다시 보내주기(Answer or Response), 멀티 유저 관리)
팀원1 -> 클라이언트의 (로그인, 회원가입, 멘토 선택) 기능, UI, Sound
팀원2(본인) -> 클라이언트의 채팅방 기능, 클라이언트와 서버간의 통신 규칙(추가), 서버 보조(추가) 

<진행방식>
1일차. 아이디어 회의 / 역할 분담
2일차. 서버 클라이언트 프로그램을 만들기 위한 로그인 구현 (클라이언트 팀원이 따로 구현-수업내용 참고) / Tab 마다의 대략적 UI(라벨, 텍스트 박스, 로그박스 등) 구성
3일차. 탭 변경시 각 탭에 필요한 정보 주고 받기
4일차. 정보를 주고 받을 때 필요한 규칙 정의 (보낼 정보들을 따로 전송 -> Json형식의 request - answer형으로 정보 전송)  / 멘토 선택 기능
5일차. 탭 구현 - 받은 정보를 바탕으로 해당 탭 구현(채팅방 이름, 멘토, 멘티 이름과 이미지 출력) 
6일차. 채팅기능 구현 - 1명의 클라이언트가 서버에게 채팅내용을 보내면 서버가 확인하고 클라이언트로 채팅내용을 다시 보내줘 클라이언트가 화면에 출력
7일차. 채팅기능 구현 - 여러명의 클라이언트가 채팅 / 멀티 클리이언트 관리
8일차. 회원가입 기능 추가 / 클라이언트 담당 팀원들의 프로그램을 합침 / 오류 수정
9일차. UI 및 Sound 추가 / 채팅방 출입시 로그를 채팅창에 출력 / 오류 수정 / PPT작성 및 발표준비

<마치며...>
- 서버-클라이언트 프로그램과 멀티 클라이언트 프로그램의 프로젝트 설계 및 진행방식에 많은 공부가 되었다.
- 서버-클라이언트 통신 규칙의 중요성을 또 다시 인식하게 되었다.

<프로젝트 하면서 생긴 문제점>
- 기능을 하나씩 구현하고 해결되면 다음 기능이나 더 복잡하게 확장하는 방식으로 진행을 했으나 1 대 1 통신에서 1 대 다 통신으로 넘어갈 때 많은 문제가 발생했고
처음부터 1 대 다로 구현할 때 보다 더 힘들것이라고 생각했다.
- while문을 통해 서버-클라이언트간의 전송 데이터를 처리(소스코드가 복잡해지고 오류가 발생) - > JSON형식으로 reqeust-answer 규칙을 정의
(EX> "request:Login,ID:id,PW:pw"  -  "answer:Login,Username:name,Data:data")
- JSON방식 통신을 C#에서 사용하는법을 찾지 못했다. -> string 변수에 JSON형식으로 넣고 Parsing하는 방식으로 적용
- git으로 협업하여 소스코드를 관리하려 했으나 사용하는데 어려움이 있다는것을 들었다. -> 바꿀 때 마다 변경 내용을 알려줌 -> 팀원의 코드를 주석 처리하고 밑에 //*// code //*// 형식으로
본인의 코드를 작성후 소스코드 전체도 공유 가능 -> 다음 프로젝트에서 다시 한번 git 공부 후 사용 예정


* 구체적인 소스코드와 흐름은 발표자료 및 프로젝트에 포함
* git::Bitcamp\수업\C#\